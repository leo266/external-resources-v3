// The "en" section of this file is automatically generated. Do not modify it.
// Other translations (e.g., "ru", "zh-cn", "zh-tw") can be modified manually.
// However, running automation scripts will delete non-"en" translations.
// Make sure to back up any manual changes before running scripts.
/* eslint-disable func-style */
/* eslint-disable require-jsdoc */
/* eslint-disable quotes */
/* eslint-disable quote-props */
/* eslint-disable dot-notation */
/* eslint-disable max-len */
function getInterfaceTranslations () {
    return {
        "en": {
            "openai.name": "OpenAI",
            "openai.description": "Allows users to chat with OpenAI, enabling interactive and intelligent conversations."
        },
        "ru": {
            "openai.name": "OpenAI",
            "openai.description": "Позволяет пользователям общаться с OpenAI, обеспечивая интерактивные и интеллектуальные беседы."
        },
        "zh-cn": {
            "openai.name": "OpenAI",
            "openai.description": "允许用户与OpenAI聊天，实现互动和智能对话。"
        },
        "zh-tw": {
            "openai.name": "OpenAI",
            "openai.description": "允許用戶與OpenAI聊天，實現互動和智能對話。"
        }
    };
}

function registerScratchExtensionTranslations () {
    return {
        "en": {
            "openai.categoryName": "OpenAI",
            "openai.setApiKey": "set OpenAI API Key to [API_KEY]",
            "openai.generateText": "ask OpenAI [PROMPT]",
            "openai.clearHistory": "clear conversation history",
            "openai.chooseModel": "set AI model to [MODEL]",
            "openai.setTemperature": "set response style to [STYLE]"
        },
        "ru": {
            "openai.categoryName": "OpenAI",
            "openai.setApiKey": "установить ключ API OpenAI на [API_KEY]",
            "openai.generateText": "спросить OpenAI [PROMPT]",
            "openai.clearHistory": "очистить историю разговора",
            "openai.chooseModel": "установить модель ИИ на [MODEL]",
            "openai.setTemperature": "установить стиль ответа на [STYLE]"
        },
        "zh-cn": {
            "openai.categoryName": "OpenAI",
            "openai.setApiKey": "将OpenAI API密钥设置为 [API_KEY]",
            "openai.generateText": "向OpenAI提问 [PROMPT]",
            "openai.clearHistory": "清除对话历史",
            "openai.chooseModel": "将AI模型设置为 [MODEL]",
            "openai.setTemperature": "将回复风格设置为 [STYLE]"
        },
        "zh-tw": {
            "openai.categoryName": "OpenAI",
            "openai.setApiKey": "將OpenAI API密鑰設置為 [API_KEY]",
            "openai.generateText": "向OpenAI提問 [PROMPT]",
            "openai.clearHistory": "清除對話歷史",
            "openai.chooseModel": "將AI模型設置為 [MODEL]",
            "openai.setTemperature": "將回覆風格設置為 [STYLE]"
        }
    };
}

function registerBlocksMessages (Blockly) {
    Object.assign(Blockly.ScratchMsgs.locales["en"],
        {}
    );

    Object.assign(Blockly.ScratchMsgs.locales["ru"],
        {}
    );

    Object.assign(Blockly.ScratchMsgs.locales["zh-cn"],
        {}
    );

    Object.assign(Blockly.ScratchMsgs.locales["zh-tw"],
        {}
    );

    return Blockly;
}

if (typeof module !== 'undefined') {
    module.exports = {getInterfaceTranslations};
}
exports = registerScratchExtensionTranslations;
exports = registerBlocksMessages;
